{"version":3,"sources":["serviceWorker.js","components/score/score.js","components/GameCard/Card.js","GameContainer/gameContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","ScoreCounter","score","highscore","className","MemoryCard","props","console","log","key","id","onClick","cardClick","clicked","name","src","image","alt","GameContainer","shuffleCards","cardArray","i","length","j","Math","floor","random","cardOrder","state","cardData","message","bind","cardOrderArray","this","forEach","setState","index","newScore","newHighscore","map","data","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"umDAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCCSC,EAjBM,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAC5B,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACb,sCAAYF,IAGd,yBAAKE,UAAU,YACd,0CAAgBD,M,OCQRE,G,MAfI,SAAAC,GAElB,OADAC,QAAQC,IAAIF,GAEZ,yBACAF,UAAU,WACVK,IAAKH,EAAMI,GACXC,QAAS,kBAAML,EAAMM,UAAUN,EAAMI,GAAIJ,EAAMO,WAE9C,yBACAH,GAAIJ,EAAMQ,KACVC,IAAMT,EAAMU,MACZC,IAAKX,EAAMQ,UCmFEI,G,wDA1Fb,aAAe,IAAD,8BACZ,gBAyCFC,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAUE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC7C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADG,EAEd,CAC7BD,EAAUG,GACVH,EAAUC,IAFXD,EAAUC,GAFkC,KAE9BD,EAAUG,GAFoB,KAO/C,MAAO,CAAEI,UAAWP,IAhDpB,EAAKQ,MAAQ,CACXC,SAAUA,EACV3B,MAAO,EACPC,UAAW,EACX2B,QAAS,qGAEX,EAAKlB,UAAU,EAAKA,UAAUmB,KAAf,gBARH,E,sDAWJrB,EAAIG,GAAU,IAAD,OACjBmB,EAAiBC,KAAKL,MAAMC,SAEhC,GAAIhB,EAKF,OAJAmB,EAAeE,SAAQ,SAAClB,EAAOK,GAC7BW,EAAeX,GAAGR,SAAU,KAE9BoB,KAAKd,aAAac,KAAKL,MAAMC,UACtBI,KAAKE,SAAS,CACnBjC,MAAO,EACP4B,QAAS,qBAGXE,EAAeE,SAAQ,SAAClB,EAAOoB,GACzB1B,IAAOM,EAAMN,KACfsB,EAAeI,GAAOvB,SAAU,GAElC,EAAKM,aAAa,EAAKS,MAAMC,UAJU,MAMV,EAAKD,MAA1BzB,EAN+B,EAM/BA,UACFkC,EAPiC,EAMpBnC,MACM,EACnBoC,EAAeD,EAAWlC,EAAYkC,EAAWlC,EACvD,OAAO,EAAKgC,SAAS,CACnBL,QAAS,yBACT5B,MAAOmC,EACPlC,UAAWmC,S,0CAkBnBL,KAAKE,SACLF,KAAKd,aAAac,KAAKL,MAAMC,a,+BAInB,IAAD,OACP,OACE,yBAAKzB,UAAU,kCACb,yBAAKA,UAAU,+BACb,sDACA,kBAAC,EAAD,CACEF,MAAO+B,KAAKL,MAAM1B,MAClBC,UAAW8B,KAAKL,MAAMzB,YAExB,4BAAK8B,KAAKL,MAAME,UAGlB,yBAAK1B,UAAU,aACb,yBAAKA,UAAU,OACd6B,KAAKL,MAAMC,SAASU,KAAI,SAAAC,GAAI,OAC3B,kBAAC,EAAD,CACE/B,IAAK+B,EAAK9B,GACVA,GAAI8B,EAAK9B,GACTI,KAAM0B,EAAK1B,KACXD,QAAS2B,EAAK3B,QACdG,MAAOwB,EAAKxB,MACZJ,UAAW,EAAKA,eAGjBL,QAAQC,IAAIyB,KAAKL,MAAMC,iB,GApFRY,cCC5BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SJ0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMvB,c","file":"static/js/main.e56569a4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst ScoreCounter = ({score, highscore}) => {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm-6\">\r\n        <h3>Score: {score}</h3>\r\n\r\n      </div>\r\n      <div className=\"col-sm-6\">\r\n       <h3>Highscore: {highscore}</h3> \r\n\r\n      </div>\r\n\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default ScoreCounter;\r\n","import React from 'react';\r\nimport \"./card.css\"\r\n\r\nconst MemoryCard = props => {\r\n\tconsole.log(props)\r\n\treturn (\r\n\t<div \r\n\tclassName=\"allCards\" \r\n\tkey={props.id}\r\n\tonClick={() => props.cardClick(props.id, props.clicked)}\r\n\t>\r\n\t\t<img \r\n\t\tid={props.name}\r\n\t\tsrc={(props.image)}\r\n\t\talt={props.name}\r\n\t\t/>\r\n\t</div>\r\n)};\r\nexport default MemoryCard;","import React, { Component } from \"react\";\r\nimport ScoreCounter from \"../components/score/score.js\";\r\nimport cardData from \"../components/GameCard/cardData.json\";\r\nimport GameCard from \"../components/GameCard/Card\";\r\nimport \"./gameContainer.css\"\r\n\r\nclass GameContainer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cardData: cardData,\r\n      score: 0,\r\n      highscore: 0,\r\n      message: \"Click an image to get started! Don't click the same image twice though, or your score will reset!\",\r\n    };\r\n    this.cardClick=this.cardClick.bind(this)\r\n  }\r\n\r\n  cardClick(id, clicked) {\r\n    let cardOrderArray = this.state.cardData;\r\n\r\n    if (clicked) {\r\n      cardOrderArray.forEach((image, i) => {\r\n        cardOrderArray[i].clicked = false;\r\n      });\r\n      this.shuffleCards(this.state.cardData)\r\n      return this.setState({\r\n        score: 0,\r\n        message: \"Womp, try again.\"\r\n      });\r\n    } else {\r\n      cardOrderArray.forEach((image, index) => {\r\n        if (id === image.id) {\r\n          cardOrderArray[index].clicked = true;\r\n        }\r\n        this.shuffleCards(this.state.cardData)\r\n\r\n        const { highscore, score } = this.state;\r\n        const newScore = score + 1;\r\n        const newHighscore = newScore > highscore ? newScore : highscore;\r\n        return this.setState({\r\n          message: \"You Guessed Correctly!\",\r\n          score: newScore,\r\n          highscore: newHighscore,\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  shuffleCards = cardArray => {\r\n    for (let i = cardArray.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [cardArray[i], cardArray[j]] = [\r\n        cardArray[j],\r\n        cardArray[i],\r\n      ];\r\n    }\r\n    return { cardOrder: cardArray };\r\n  }\r\n\r\ncomponentDidMount(){\r\n  this.setState(\r\n  this.shuffleCards(this.state.cardData)\r\n  )\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid game-container\">\r\n        <div className=\"text-center message-display\">\r\n          <h1>Planetside Clicky Game</h1>\r\n          <ScoreCounter\r\n            score={this.state.score}\r\n            highscore={this.state.highscore}\r\n          />\r\n          <h2>{this.state.message}</h2>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n          {this.state.cardData.map(data => (\r\n            <GameCard\r\n              key={data.id}\r\n              id={data.id}\r\n              name={data.name}\r\n              clicked={data.clicked}\r\n              image={data.image}\r\n              cardClick={this.cardClick}\r\n            />\r\n            ))}\r\n            {console.log(this.state.cardData)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GameContainer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport GameContainer from \"./GameContainer/gameContainer\"\r\n// import GameContainer from \"./GameContainer/gameContainer\"\r\n\r\nReactDOM.render(\r\n  <GameContainer/>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}